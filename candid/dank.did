type TransactionId = nat64;

type WithdrawError = variant {
    InsufficientBalance;
    InvalidTokenContract;
    NotSufficientLiquidity;
};

type WithdrawResult = variant {
    Ok : TransactionId;
    Err: WithdrawError;
};

type TransferError = variant {
    InsufficientBalance;
    AmountTooLarge;
    CallFailed;
    Unknown;
};

type TransferResponse = variant {
    Ok : TransactionId;
    Err: TransferError;
};

type DepositError = variant {
    NotSufficientLiquidity;
};

type DepositResult = variant {
    Ok : TransactionId;
    Err: DepositError;
};

type ResultCall = variant {
    Ok : record { return: blob };
    Err : text;
};

type ResultCreate = variant {
    Ok : record { canister_id: principal };
    Err: text;
};

type EventDetail = variant {
    Transfer : record {
        from : principal;
        to   : principal;
    };
    // DEX events
    Deposit  : record {
        to   : principal;
    };
    Withdraw : record {
        from : principal;
        to   : principal;
    };
    CanisterCalled : record {
        canister : principal;
        method_name: text;
    };
    CanisterCreated : record {
        canister : principal;
    };
    ChargingStationDeployed : record {
        canister : principal;
    };
};

type Event = record {
    timestamp : nat64;
    amount    : nat64;
    fee       : nat64;
    detail    : EventDetail;
};

type GetTransactionResult = variant {
    None;
    Some : Event;
};

type EventsConnection = record {
    data            : vec Event;
    next_canister_id: opt principal;
};

service : {
    name: () -> (text);

    balance: (opt principal) -> (amount: nat64);
    deposit: (opt principal) -> (DepositResult);
    withdraw: (record { canister_id: principal; amount: nat64 }) -> (WithdrawResult);
    transfer: (record { to: principal; amount: nat64 }) -> (TransferResponse);

    // History
    get_transaction : (id: TransactionId) -> (GetTransactionResult) query;
    events : (record { from: opt nat64; limit: nat16 }) -> (EventsConnection) query;

    // Proxy
    wallet_call: (record {
        canister: principal;
        method_name: text;
        args: blob;
        cycles: nat64;
    }) -> (ResultCall);

    // Managing canister
    wallet_create_canister: (record {
        cycles: nat64;
        controller: opt principal;  // If omitted, set the controller to the caller.
    }) -> (ResultCreate);

    whoami : () -> (principal);
}
