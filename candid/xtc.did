type TransactionId = nat64;

type BurnError = variant {
    InsufficientBalance;
    InvalidTokenContract;
    NotSufficientLiquidity;
};

type BurnResult = variant {
    Ok : TransactionId;
    Err: BurnError;
};

type TransferError = variant {
    InsufficientBalance;
    AmountTooLarge;
    CallFailed;
    Unknown;
};

type TransferResponse = variant {
    Ok : TransactionId;
    Err: TransferError;
};

type MintError = variant {
    NotSufficientLiquidity;
};

type MintResult = variant {
    Ok : TransactionId;
    Err: MintError;
};

type ResultCall = variant {
    Ok : record { return: blob };
    Err : text;
};

type CreateResult = variant {
    Ok : record { canister_id: principal };
    Err: text;
};

type EventDetail = variant {
    Transfer : record {
        from : principal;
        to   : principal;
    };
    // DEX events
    Mint     : record {
        to   : principal;
    };
    Burn     : record {
        from : principal;
        to   : principal;
    };
    CanisterCalled : record {
        from : principal;
        canister : principal;
        method_name: text;
    };
    CanisterCreated : record {
        from : principal;
        canister : principal;
    };
};

type Event = record {
    fee       : nat64;
    kind      : EventDetail;
    cycles    : nat64;
    timestamp : nat64;
};

type EventsConnection = record {
    data            : vec Event;
    next_canister_id: opt principal;
};

type TokenMetaData = record {
    name    : text;
    symbol  : text;
    decimal : nat8;
    features: vec text;
};

type Stats = record {
    supply: nat;
    history_events: nat64;
    balance: nat64;
    // Usage statistics
    transfers_count: nat64;
    mints_count: nat64;
    burns_count: nat64;
    proxy_calls_count: nat64;
    canisters_created_count: nat64;
};

type ResultSend = variant {
    Ok : null;
    Err: text;
};

service : {
    // Return all of the meta data of a token.
    meta : () -> (TokenMetaData) query;

    // Return all of the meta data of a token as an update.
    meta_certified : () -> (TokenMetaData);

    balance: (opt principal) -> (amount: nat64);
    transfer: (record { to: principal; amount: nat64 }) -> (TransferResponse);
    mint: (opt principal) -> (MintResult);
    burn: (record { canister_id: principal; amount: nat64 }) -> (BurnResult);

    // History
    get_transaction : (id: TransactionId) -> (opt Event);
    events : (record { from: opt nat64; limit: nat16 }) -> (EventsConnection) query;

    // Management
    halt : () -> ();

    // Usage statistics
    stats : () -> (Stats) query;

    // ----------- Cycles wallet compatible API

    name : () -> (opt text) query;

    wallet_balance: () -> (record { amount: nat64 }) query;
    wallet_send: (record { canister: principal; amount: nat64 }) -> (ResultSend);

    // Managing canister
    wallet_create_canister: (record {
        cycles: nat64;
        controller: opt principal;  // If omitted, set the controller to the caller.
    }) -> (CreateResult);

    wallet_create_wallet: (record {
        cycles: nat64;
        controller: opt principal;
    }) -> (CreateResult);

    // Call Forwarding
    wallet_call: (record {
        canister: principal;
        method_name: text;
        args: blob;
        cycles: nat64;
    }) -> (ResultCall);
}
