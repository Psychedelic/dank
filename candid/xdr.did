type BalanceResult = record { amount : nat64 };
type BurnArguments = record { canister_id : principal; amount : nat64 };
type BurnError = variant {
  InsufficientBalance;
  InvalidTokenContract;
  NotSufficientLiquidity;
};
type CreateCanisterArgs = record { controller : opt principal; cycles : nat64 };
type EventsArgs = record { offset : opt nat64; limit : nat16 };
type EventsConnection = record {
  data : vec Transaction;
  next_offset : nat64;
  next_canister_id : opt principal;
};
type Metadata = record {
  fee : nat;
  decimals : nat8;
  owner : principal;
  logo : text;
  name : text;
  totalSupply : nat;
  symbol : text;
};
type Operation = variant {
  transferFrom;
  burn;
  mint;
  approve;
  canisterCalled;
  transfer;
  canisterCreated;
};
type Operation_1 = variant {
  Burn : record { from : text; amount : Tokens };
  Mint : record { to : text; amount : Tokens };
  Transfer : record { to : text; fee : Tokens; from : text; amount : Tokens };
};
type Result = variant { Ok : nat; Err : TxError };
type Result_1 = variant { Ok : nat64; Err : BurnError };
type Result_2 = variant { Ok : nat; Err : TxErrorLegacy };
type Result_3 = variant { Ok : WithCanisterId; Err : text };
type Result_4 = variant { Ok; Err : text };
type SendCyclesArgs = record { canister : principal; amount : nat64 };
type StatsData = record {
  fee : nat;
  transfers_count : nat64;
  balance : nat64;
  mints_count : nat64;
  transfers_from_count : nat64;
  canisters_created_count : nat64;
  supply : nat;
  burns_count : nat64;
  approvals_count : nat64;
  proxy_calls_count : nat64;
  history_events : nat64;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  fee : nat64;
  status : TransactionStatus;
  kind : TransactionKind;
  cycles : nat64;
  timestamp : nat64;
};
type TransactionKind = variant {
  Approve : record { to : principal; from : principal };
  Burn : record { to : principal; from : principal };
  Mint : record { to : principal };
  CanisterCreated : record { from : principal; canister : principal };
  CanisterCalled : record {
    from : principal;
    method_name : text;
    canister : principal;
  };
  Transfer : record { to : principal; from : principal };
  TransferFrom : record {
    to : principal;
    from : principal;
    caller : principal;
  };
};
type TransactionStatus = variant { FAILED; SUCCEEDED };
type Transaction_1 = record {
  memo : nat64;
  operation : Operation_1;
  created_at_time : TimeStamp;
};
type TxError = variant {
  NotifyDfxFailed;
  InsufficientAllowance;
  InsufficientXDRFee;
  UnexpectedCyclesResponse;
  InsufficientBalance;
  ErrorOperationStyle;
  Unauthorized;
  LedgerTrap;
  ErrorTo;
  Other;
  FetchRateFailed;
  BlockUsed;
  AmountTooSmall;
};
type TxErrorLegacy = variant { InsufficientAllowance; InsufficientBalance };
type TxRecord = record {
  op : Operation;
  to : principal;
  fee : nat;
  status : TransactionStatus;
  from : principal;
  timestamp : int;
  caller : opt principal;
  index : nat;
  amount : nat;
};
type WithCanisterId = record { canister_id : principal };
service : {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  balance : (opt principal) -> (nat64);
  balanceOf : (principal) -> (nat) query;
  burn : (BurnArguments) -> (Result_1);
  decimals : () -> (nat8) query;
  events : (EventsArgs) -> (EventsConnection) query;
  finish_pending_tasks : (nat32) -> ();
  getBlockUsed : () -> (vec nat64) query;
  getMetadata : () -> (Metadata) query;
  getTransaction : (nat) -> (TxRecord);
  getTransactions : (nat, nat) -> (vec TxRecord);
  get_map_block_used : (nat64) -> (opt nat64) query;
  get_transaction : (nat64) -> (opt Transaction_1);
  halt : () -> ();
  historySize : () -> (nat) query;
  isBlockUsed : (nat64) -> (bool) query;
  logo : () -> (text) query;
  mint : (principal, nat) -> (Result);
  mint_by_icp : (opt vec nat8, nat64) -> (Result);
  mint_by_icp_recover : (opt vec nat8, nat64, principal) -> (Result);
  name : () -> (text) query;
  nameErc20 : () -> (text) query;
  stats : () -> (StatsData) query;
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (Result);
  transferErc20 : (principal, nat) -> (Result_2);
  transferFrom : (principal, principal, nat) -> (Result);
  version : () -> (text) query;
  wallet_balance : () -> (BalanceResult) query;
  wallet_create_canister : (CreateCanisterArgs) -> (Result_3);
  wallet_create_wallet : (CreateCanisterArgs) -> (Result_3);
  wallet_send : (SendCyclesArgs) -> (Result_4);
}